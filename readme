Задачи
======

0 Очередь задач
---------------
Реализовать класс "Очередь задач".
Возможности:
	поставить задачу в очередь на выполнение на фоновом потоке,
	дождаться выполнения всех задач из очереди.

1 Потокобезопасная очередь с приоритетом
--------------------------
Контекст: несколько потоков, очередь с данными.
Проблема: пока один поток работает с очередью, остальные ждут.
Возможность для маневра: работа с различными участками памяти требует блокировки только части очереди.
Задача: Реализовать класс "Потокобезопасная очередь с приоритетом".

2 Иерархический мьютекс
-----------------------
Проблема: при использовании нескольких мьютексов в программе может случиться взаимная блокировка deadlock.
Идея: каждому мьютексу присвоим приоритет. Разрешим захватывать мьютексы только в одном порядке (от большего приориета к меньшему или наоборот). При попытке захватить мьютекс не по порядку сигнализируем разработчику.
Почему поможет: каждый раз мьютексы захватываются в одном порядке, что не может привести к deadlock'у в принципе.
Задача: реализовать класс "иерархический мьютекс".

3 Многопоточный qsort
---------------------
Задача: Реализовать многопоточную сортировку.
Тесты, что интересно проверить:
а) сортировка работает правильно
б) время работы в сравнении с однопоточной и стандартной
Все проверять, меняя входные данные:
	размер массива (0, 1, 2, 3, 4, 2^n - 1, 2^n, 2^n + 1, ...),
	начальная упорядоченность элементов (произвольный/уже отсортированный/в обратном порядке/пирамида, ...)
	количество сортирующих потоков.

4 Частичная сумма
-----------------
Параллельное вычисление частичных сумм, на заданном массиве.

5 Thread-safe lock-free queue.
-----------------------------------
Задача: Реализовать.

6 Thread-safe logger
--------------------
Проблема: несовершенство работы cout. Не нравится нам, что вызовы cout блокируют остальные потоки.
Идея: реализовать свой логер, который не будет задерживать работу потоков.
Задача: реализовать логер.

7 Решение СЛАУ
--------------
Параллельное решение СЛАУ.

8 Разложение QR || SVD.
------------------------
Реализовать параллельное QR или SVD разложение матрицы.

9 FFT
-----
Парараллельное FFT. Тестировать на примере перемножения многочленов.

10 Алгоритмы на графах
-----------------------
Распараллелить пятнашки/восьминашки.
